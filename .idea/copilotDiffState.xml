<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/retailassistant/features/invoices/creation/InvoiceCreationScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/retailassistant/features/invoices/creation/InvoiceCreationScreen.kt" />
              <option name="originalContent" value="package com.retailassistant.features.invoices.creation&#10;import android.app.Activity&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.IntentSenderRequest&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.animation.AnimatedContent&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.togetherWith&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.safeDrawingPadding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Clear&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.DocumentScanner&#10;import androidx.compose.material.icons.filled.Email&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Phone&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.IconButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.SnackbarHost&#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import coil.compose.AsyncImage&#10;import com.google.mlkit.vision.documentscanner.GmsDocumentScannerOptions&#10;import com.google.mlkit.vision.documentscanner.GmsDocumentScanning&#10;import com.google.mlkit.vision.documentscanner.GmsDocumentScanningResult&#10;import com.retailassistant.ui.components.common.AutoCompleteCustomerField&#10;import com.retailassistant.ui.components.common.CenteredTopAppBar&#10;import com.retailassistant.ui.components.common.EnhancedDatePickerField&#10;import com.retailassistant.ui.components.common.FormTextField&#10;import com.retailassistant.ui.components.common.GradientButton&#10;import org.koin.androidx.compose.koinViewModel&#10;@Composable&#10;fun InvoiceCreationScreen(&#10;    onNavigateBack: () -&gt; Unit,&#10;    viewModel: InvoiceCreationViewModel = koinViewModel()&#10;) {&#10;    val state by viewModel.uiState.collectAsStateWithLifecycle()&#10;    val context = LocalContext.current&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;    val scanner = remember {&#10;        val options = GmsDocumentScannerOptions.Builder()&#10;            .setGalleryImportAllowed(true)&#10;            .setPageLimit(1)&#10;            .setResultFormats(GmsDocumentScannerOptions.RESULT_FORMAT_JPEG)&#10;            .setScannerMode(GmsDocumentScannerOptions.SCANNER_MODE_FULL)&#10;            .build()&#10;        GmsDocumentScanning.getClient(options)&#10;    }&#10;    val scannerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.StartIntentSenderForResult()&#10;    ) { result -&gt;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            GmsDocumentScanningResult.fromActivityResultIntent(result.data)&#10;                ?.pages?.firstOrNull()?.imageUri&#10;                ?.let { viewModel.sendAction(InvoiceCreationAction.ImageSelected(it)) }&#10;        }&#10;    }&#10;    LaunchedEffect(viewModel.event) {&#10;        viewModel.event.collect { event -&gt;&#10;            when (event) {&#10;                is InvoiceCreationEvent.NavigateBack -&gt; onNavigateBack()&#10;                is InvoiceCreationEvent.ShowMessage -&gt; snackbarHostState.showSnackbar(event.message)&#10;            }&#10;        }&#10;    }&#10;    Scaffold(&#10;        topBar = {&#10;            CenteredTopAppBar(&#10;                title = &quot;New Invoice&quot;,&#10;                navigationIcon = {&#10;                    IconButton(onClick = onNavigateBack) { Icon(Icons.Default.Close, &quot;Close&quot;) }&#10;                }&#10;            )&#10;        },&#10;        snackbarHost = { SnackbarHost(snackbarHostState) },&#10;        containerColor = MaterialTheme.colorScheme.background,&#10;        bottomBar = {&#10;            Surface(shadowElevation = 8.dp, color = MaterialTheme.colorScheme.surface) {&#10;                GradientButton(&#10;                    text = &quot;Save Invoice&quot;,&#10;                    onClick = { viewModel.sendAction(InvoiceCreationAction.SaveInvoice) },&#10;                    isLoading = state.isSaving,&#10;                    enabled = state.isFormValid,&#10;                    modifier = Modifier&#10;                        .padding(16.dp)&#10;                        .safeDrawingPadding()&#10;                )&#10;            }&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;        ) {&#10;            ImageSelectionSection(&#10;                imageUri = state.scannedImageUri,&#10;                isAiExtracting = state.isAiExtracting,&#10;                onClick = {&#10;                    scanner.getStartScanIntent(context as Activity)&#10;                        .addOnSuccessListener { scannerLauncher.launch(IntentSenderRequest.Builder(it).build()) }&#10;                        .addOnFailureListener { viewModel.sendAction(InvoiceCreationAction.ShowScannerError) }&#10;                },&#10;                onClearClick = { viewModel.sendAction(InvoiceCreationAction.ClearImage) }&#10;            )&#10;            InvoiceForm(state = state, onAction = viewModel::sendAction)&#10;        }&#10;    }&#10;}&#10;@Composable&#10;private fun ImageSelectionSection(&#10;    imageUri: Uri?,&#10;    isAiExtracting: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    onClearClick: () -&gt; Unit&#10;) {&#10;    // DESIGN: A more polished image selection area with a dashed border for the placeholder.&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(220.dp)&#10;            .padding(16.dp)&#10;            .clip(MaterialTheme.shapes.large)&#10;            .background(MaterialTheme.colorScheme.surface)&#10;            .border(&#10;                1.dp,&#10;                MaterialTheme.colorScheme.outlineVariant,&#10;                MaterialTheme.shapes.large&#10;            )&#10;            .clickable(onClick = onClick, enabled = !isAiExtracting)&#10;    ) {&#10;        AnimatedContent(&#10;            targetState = imageUri,&#10;            transitionSpec = { fadeIn(tween(300)) togetherWith fadeOut(tween(300)) },&#10;            label = &quot;ImageSelection&quot;&#10;        ) { uri -&gt;&#10;            if (uri != null) {&#10;                AsyncImage(&#10;                    model = uri,&#10;                    contentDescription = &quot;Scanned Invoice&quot;,&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentScale = ContentScale.Crop&#10;                )&#10;            } else {&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    verticalArrangement = Arrangement.Center&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.DocumentScanner,&#10;                        &quot;Scan&quot;,&#10;                        Modifier.size(48.dp),&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    Spacer(Modifier.height(12.dp))&#10;                    Text(&#10;                        &quot;Tap to scan invoice&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.SemiBold&#10;                    )&#10;                    Text(&#10;                        &quot;AI will attempt to extract details&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;        }&#10;        if (isAiExtracting) {&#10;            Box(&#10;                Modifier&#10;                    .fillMaxSize()&#10;                    .background(MaterialTheme.colorScheme.scrim.copy(alpha = 0.6f)),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                CircularProgressIndicator(color = Color.White)&#10;            }&#10;        }&#10;        if (imageUri != null &amp;&amp; !isAiExtracting) {&#10;            IconButton(&#10;                onClick = onClearClick,&#10;                modifier = Modifier&#10;                    .align(Alignment.TopEnd)&#10;                    .padding(8.dp),&#10;                colors = IconButtonDefaults.iconButtonColors(&#10;                    containerColor = MaterialTheme.colorScheme.scrim.copy(alpha = 0.5f),&#10;                    contentColor = Color.White&#10;                )&#10;            ) {&#10;                Icon(Icons.Default.Clear, &quot;Clear Image&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;@Composable&#10;private fun InvoiceForm(state: InvoiceCreationState, onAction: (InvoiceCreationAction) -&gt; Unit) {&#10;    Column(&#10;        modifier = Modifier.padding(horizontal = 16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        SectionHeader(&quot;Invoice Details&quot;)&#10;        AutoCompleteCustomerField(&#10;            value = state.customerName,&#10;            onValueChange = { onAction(InvoiceCreationAction.UpdateCustomerName(it)) },&#10;            onItemSelected = { onAction(InvoiceCreationAction.CustomerSelected(it)) },&#10;            label = &quot;Customer Name*&quot;,&#10;            suggestions = state.customers,&#10;            enabled = !state.isSaving,&#10;            leadingIcon = { Icon(Icons.Default.Person, &quot;Customer Name&quot;) }&#10;        )&#10;        FormTextField(&#10;            value = state.amount,&#10;            onValueChange = { onAction(InvoiceCreationAction.UpdateAmount(it)) },&#10;            label = &quot;Total Amount*&quot;,&#10;            enabled = !state.isSaving,&#10;            prefix = &quot;₹&quot;,&#10;        )&#10;        Row(horizontalArrangement = Arrangement.spacedBy(16.dp)) {&#10;            EnhancedDatePickerField(&#10;                value = state.issueDate,&#10;                onValueChange = { onAction(InvoiceCreationAction.UpdateIssueDate(it)) },&#10;                label = &quot;Issue Date*&quot;,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            EnhancedDatePickerField(&#10;                value = state.dueDate,&#10;                onValueChange = { onAction(InvoiceCreationAction.UpdateDueDate(it)) },&#10;                label = &quot;Due Date*&quot;,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;        }&#10;        SectionHeader(&quot;Contact Info (Optional)&quot;)&#10;        FormTextField(&#10;            value = state.phoneNumber,&#10;            onValueChange = { onAction(InvoiceCreationAction.UpdatePhoneNumber(it)) },&#10;            label = &quot;Phone Number&quot;,&#10;            enabled = !state.isSaving,&#10;            leadingIcon = { Icon(Icons.Default.Phone, &quot;Phone Number&quot;) }&#10;        )&#10;        FormTextField(&#10;            value = state.email,&#10;            onValueChange = { onAction(InvoiceCreationAction.UpdateEmail(it)) },&#10;            label = &quot;Email&quot;,&#10;            enabled = !state.isSaving,&#10;            leadingIcon = { Icon(Icons.Default.Email, &quot;Email&quot;) }&#10;        )&#10;        Spacer(Modifier.height(24.dp))&#10;    }&#10;}&#10;@Composable&#10;private fun SectionHeader(text: String) {&#10;    Text(&#10;        text = text,&#10;        style = MaterialTheme.typography.titleMedium,&#10;        fontWeight = FontWeight.Bold,&#10;        modifier = Modifier.padding(top = 16.dp, bottom = 8.dp)&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.retailassistant.features.invoices.creation&#10;import android.app.Activity&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.IntentSenderRequest&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.animation.AnimatedContent&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.togetherWith&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.safeDrawingPadding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Clear&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.DocumentScanner&#10;import androidx.compose.material.icons.filled.Email&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Phone&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.IconButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.SnackbarHost&#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import coil.compose.AsyncImage&#10;import com.google.mlkit.vision.documentscanner.GmsDocumentScannerOptions&#10;import com.google.mlkit.vision.documentscanner.GmsDocumentScanning&#10;import com.google.mlkit.vision.documentscanner.GmsDocumentScanningResult&#10;import com.retailassistant.ui.components.common.AutoCompleteCustomerField&#10;import com.retailassistant.ui.components.common.CenteredTopAppBar&#10;import com.retailassistant.ui.components.common.EnhancedDatePickerField&#10;import com.retailassistant.ui.components.common.FormTextField&#10;import com.retailassistant.ui.components.common.GradientButton&#10;import org.koin.androidx.compose.koinViewModel&#10;@Composable&#10;fun InvoiceCreationScreen(&#10;    onNavigateBack: () -&gt; Unit,&#10;    viewModel: InvoiceCreationViewModel = koinViewModel()&#10;) {&#10;    val state by viewModel.uiState.collectAsStateWithLifecycle()&#10;    val context = LocalContext.current&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;    val scanner = remember {&#10;        val options = GmsDocumentScannerOptions.Builder()&#10;            .setGalleryImportAllowed(true)&#10;            .setPageLimit(1)&#10;            .setResultFormats(GmsDocumentScannerOptions.RESULT_FORMAT_JPEG)&#10;            .setScannerMode(GmsDocumentScannerOptions.SCANNER_MODE_FULL)&#10;            .build()&#10;        GmsDocumentScanning.getClient(options)&#10;    }&#10;    val scannerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.StartIntentSenderForResult()&#10;    ) { result -&gt;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            GmsDocumentScanningResult.fromActivityResultIntent(result.data)&#10;                ?.pages?.firstOrNull()?.imageUri&#10;                ?.let { viewModel.sendAction(InvoiceCreationAction.ImageSelected(it)) }&#10;        }&#10;    }&#10;    LaunchedEffect(viewModel.event) {&#10;        viewModel.event.collect { event -&gt;&#10;            when (event) {&#10;                is InvoiceCreationEvent.NavigateBack -&gt; onNavigateBack()&#10;                is InvoiceCreationEvent.ShowMessage -&gt; snackbarHostState.showSnackbar(event.message)&#10;            }&#10;        }&#10;    }&#10;    Scaffold(&#10;        topBar = {&#10;            CenteredTopAppBar(&#10;                title = &quot;New Invoice&quot;,&#10;                navigationIcon = {&#10;                    IconButton(onClick = onNavigateBack) { Icon(Icons.Default.Close, &quot;Close&quot;) }&#10;                }&#10;            )&#10;        },&#10;        snackbarHost = { SnackbarHost(snackbarHostState) },&#10;        containerColor = MaterialTheme.colorScheme.background,&#10;        bottomBar = {&#10;            Surface(shadowElevation = 8.dp, color = MaterialTheme.colorScheme.surface) {&#10;                GradientButton(&#10;                    text = &quot;Save Invoice&quot;,&#10;                    onClick = { viewModel.sendAction(InvoiceCreationAction.SaveInvoice) },&#10;                    isLoading = state.isSaving,&#10;                    enabled = state.validationResult is ValidationResult.Valid,&#10;                    modifier = Modifier&#10;                        .padding(16.dp)&#10;                        .safeDrawingPadding()&#10;                )&#10;            }&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;        ) {&#10;            ImageSelectionSection(&#10;                imageUri = state.scannedImageUri,&#10;                isAiExtracting = state.isAiExtracting,&#10;                onClick = {&#10;                    scanner.getStartScanIntent(context as Activity)&#10;                        .addOnSuccessListener { scannerLauncher.launch(IntentSenderRequest.Builder(it).build()) }&#10;                        .addOnFailureListener { viewModel.sendAction(InvoiceCreationAction.ShowScannerError) }&#10;                },&#10;                onClearClick = { viewModel.sendAction(InvoiceCreationAction.ClearImage) }&#10;            )&#10;            InvoiceForm(state = state, onAction = viewModel::sendAction)&#10;        }&#10;    }&#10;}&#10;@Composable&#10;private fun ImageSelectionSection(&#10;    imageUri: Uri?,&#10;    isAiExtracting: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    onClearClick: () -&gt; Unit&#10;) {&#10;    // DESIGN: A more polished image selection area with a dashed border for the placeholder.&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(220.dp)&#10;            .padding(16.dp)&#10;            .clip(MaterialTheme.shapes.large)&#10;            .background(MaterialTheme.colorScheme.surface)&#10;            .border(&#10;                1.dp,&#10;                MaterialTheme.colorScheme.outlineVariant,&#10;                MaterialTheme.shapes.large&#10;            )&#10;            .clickable(onClick = onClick, enabled = !isAiExtracting)&#10;    ) {&#10;        AnimatedContent(&#10;            targetState = imageUri,&#10;            transitionSpec = { fadeIn(tween(300)) togetherWith fadeOut(tween(300)) },&#10;            label = &quot;ImageSelection&quot;&#10;        ) { uri -&gt;&#10;            if (uri != null) {&#10;                AsyncImage(&#10;                    model = uri,&#10;                    contentDescription = &quot;Scanned Invoice&quot;,&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentScale = ContentScale.Crop&#10;                )&#10;            } else {&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    verticalArrangement = Arrangement.Center&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.DocumentScanner,&#10;                        &quot;Scan&quot;,&#10;                        Modifier.size(48.dp),&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    Spacer(Modifier.height(12.dp))&#10;                    Text(&#10;                        &quot;Tap to scan invoice&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.SemiBold&#10;                    )&#10;                    Text(&#10;                        &quot;AI will attempt to extract details&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;        }&#10;        if (isAiExtracting) {&#10;            Box(&#10;                Modifier&#10;                    .fillMaxSize()&#10;                    .background(MaterialTheme.colorScheme.scrim.copy(alpha = 0.6f)),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                CircularProgressIndicator(color = Color.White)&#10;            }&#10;        }&#10;        if (imageUri != null &amp;&amp; !isAiExtracting) {&#10;            IconButton(&#10;                onClick = onClearClick,&#10;                modifier = Modifier&#10;                    .align(Alignment.TopEnd)&#10;                    .padding(8.dp),&#10;                colors = IconButtonDefaults.iconButtonColors(&#10;                    containerColor = MaterialTheme.colorScheme.scrim.copy(alpha = 0.5f),&#10;                    contentColor = Color.White&#10;                )&#10;            ) {&#10;                Icon(Icons.Default.Clear, &quot;Clear Image&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;@Composable&#10;private fun InvoiceForm(state: InvoiceCreationState, onAction: (InvoiceCreationAction) -&gt; Unit) {&#10;    Column(&#10;        modifier = Modifier.padding(horizontal = 16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        SectionHeader(&quot;Invoice Details&quot;)&#10;        AutoCompleteCustomerField(&#10;            value = state.customerName,&#10;            onValueChange = { onAction(InvoiceCreationAction.UpdateCustomerName(it)) },&#10;            onItemSelected = { onAction(InvoiceCreationAction.CustomerSelected(it)) },&#10;            label = &quot;Customer Name*&quot;,&#10;            suggestions = state.customers,&#10;            enabled = !state.isSaving,&#10;            leadingIcon = { Icon(Icons.Default.Person, &quot;Customer Name&quot;) }&#10;        )&#10;        FormTextField(&#10;            value = state.amount,&#10;            onValueChange = { onAction(InvoiceCreationAction.UpdateAmount(it)) },&#10;            label = &quot;Total Amount*&quot;,&#10;            enabled = !state.isSaving,&#10;            prefix = &quot;₹&quot;,&#10;        )&#10;        Row(horizontalArrangement = Arrangement.spacedBy(16.dp)) {&#10;            EnhancedDatePickerField(&#10;                value = state.issueDate,&#10;                onValueChange = { onAction(InvoiceCreationAction.UpdateIssueDate(it)) },&#10;                label = &quot;Issue Date*&quot;,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            EnhancedDatePickerField(&#10;                value = state.dueDate,&#10;                onValueChange = { onAction(InvoiceCreationAction.UpdateDueDate(it)) },&#10;                label = &quot;Due Date*&quot;,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;        }&#10;        SectionHeader(&quot;Contact Info (Optional)&quot;)&#10;        FormTextField(&#10;            value = state.phoneNumber,&#10;            onValueChange = { onAction(InvoiceCreationAction.UpdatePhoneNumber(it)) },&#10;            label = &quot;Phone Number&quot;,&#10;            enabled = !state.isSaving,&#10;            leadingIcon = { Icon(Icons.Default.Phone, &quot;Phone Number&quot;) }&#10;        )&#10;        FormTextField(&#10;            value = state.email,&#10;            onValueChange = { onAction(InvoiceCreationAction.UpdateEmail(it)) },&#10;            label = &quot;Email&quot;,&#10;            enabled = !state.isSaving,&#10;            leadingIcon = { Icon(Icons.Default.Email, &quot;Email&quot;) }&#10;        )&#10;        Spacer(Modifier.height(24.dp))&#10;    }&#10;}&#10;@Composable&#10;private fun SectionHeader(text: String) {&#10;    Text(&#10;        text = text,&#10;        style = MaterialTheme.typography.titleMedium,&#10;        fontWeight = FontWeight.Bold,&#10;        modifier = Modifier.padding(top = 16.dp, bottom = 8.dp)&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>